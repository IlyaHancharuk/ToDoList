{"version":3,"sources":["components/Taskslist.tsx","components/Todolist.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Taskslist","props","taskItems","tasks","length","map","t","taskClasses","concat","isDone","React","createElement","className","key","id","type","defaultChecked","onChange","e","changeTaskStatus","todoId","currentTarget","checked","title","onClick","removeTask","Todolist","_useState","useState","_useState2","_slicedToArray","taskTitle","setTaskTitle","_useState3","_useState4","error","setError","handlerToFilterCreator","filter","changeFilter","inputClasses","setFilterAllBtnClasses","setFilterActiveBtnClasses","setFilterComplitedBtnClasses","removeTodoList","placeholder","value","text","target","trimStart","addTask","disabled","App","_useState5","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","_defineProperty","setTasks","todoListId","updatedTodoList","todo","_objectSpread","updatedTasks","status","_toConsumableArray","addTodoList","newTodo","todoListComponents","filtredTasks","getFiltredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d54a8de4.chunk.js","sourcesContent":["import React, { ChangeEvent, FC } from \"react\";\r\nimport { TasksType } from \"../types\";\r\n\r\ntype TaskListPropsType = {\r\n    todoId: string;\r\n    tasks: TasksType[];\r\n    removeTask: (todoListId: string, id: string) => void;\r\n    changeTaskStatus: (todoListId: string, id: string, isDone: boolean) => void;\r\n}\r\n\r\nconst Taskslist: FC<TaskListPropsType> = (props) => {\r\n    const taskItems: JSX.Element[] | JSX.Element =\r\n        props.tasks.length\r\n            ? props.tasks.map(t => {\r\n            const removeTask = () => props.removeTask(props.todoId, t.id);\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(props.todoId, t.id, e.currentTarget.checked)\r\n            };\r\n\r\n            const taskClasses = `task ${t.isDone ? 'task-done' : ''}`;\r\n\r\n            return (\r\n                <li className={taskClasses} key={t.id}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        defaultChecked={t.isDone}\r\n                        onChange={changeTaskStatus} />\r\n                    <span>{t.title}</span>\r\n                    <button className=\"btn\" onClick={removeTask}> X </button>\r\n                </li>\r\n            )\r\n        })\r\n        : <span className=\"error-message\">You tasklist is empty!</span>\r\n        return (\r\n        <ul className=\"tasklist\">\r\n           {taskItems}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Taskslist;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport Taskslist from \"./Taskslist\";\r\nimport { FilterType, TasksType } from \"../types\";\r\n\r\ntype PropsToTodoType = {\r\n    todoId: string;\r\n    title: string;\r\n    tasks: TasksType[];\r\n    filter: FilterType;\r\n\r\n    addTask: (todoListId: string, title: string) => void;\r\n    removeTask: (todoListId: string, id: string) => void;\r\n    changeTaskStatus: (todoListId: string, id: string, isDone: boolean) => void;\r\n\r\n    changeFilter: (todoListId: string, filter: FilterType) => void;\r\n    addTodoList: (title: string) => void;\r\n    removeTodoList: (todoListId: string) => void;\r\n}\r\n\r\nconst TaskTitleMaxLength = 15;\r\n\r\nconst Todolist: React.FC<PropsToTodoType> = (props) => {\r\n    const [taskTitle, setTaskTitle] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const handlerToFilterCreator = (filter: FilterType) => () => props.changeFilter(props.todoId, filter);\r\n    const addTask = () => {\r\n        props.addTask(props.todoId, taskTitle);\r\n        setTaskTitle('');\r\n    };\r\n    const changeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const text = e.target.value.trimStart();\r\n        text.length > TaskTitleMaxLength ? setError(true) : setError(false);\r\n        setTaskTitle(text);\r\n    };\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.todoId);\r\n\r\n    const inputClasses = `input ${error && 'error-input'}`;\r\n    const setFilterAllBtnClasses = `${props.filter === 'all' ? 'active-filter-btn' : ''} btn`;\r\n    const setFilterActiveBtnClasses = `${props.filter === 'active' ? 'active-filter-btn' : ''} btn`;\r\n    const setFilterComplitedBtnClasses = `${props.filter === 'completed' ? 'active-filter-btn' : ''} btn`;\r\n\r\n    return (\r\n        <div className=\"Todolist\">\r\n            <h3>\r\n                {props.title}\r\n                <button className=\"btn\" onClick={removeTodoList}>X</button>\r\n            </h3>\r\n            <div className=\"add-task-block\">\r\n                <input\r\n                    className={inputClasses}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your task title\"\r\n                    value={taskTitle}\r\n                    onChange={changeTaskTitle} />\r\n                <button className=\"btn\" onClick={addTask} disabled={taskTitle === '' || error}> + </button>\r\n                {taskTitle.length > TaskTitleMaxLength && <div className=\"error-message\">Task title is to long!</div>}\r\n            </div>\r\n            <Taskslist\r\n                todoId={props.todoId}\r\n                tasks={props.tasks}\r\n                removeTask={props.removeTask}\r\n                changeTaskStatus={props.changeTaskStatus} />\r\n            <div className=\"filter-buttons\">\r\n                <button className={setFilterAllBtnClasses} onClick={handlerToFilterCreator('all')}>All</button>\r\n                <button className={setFilterActiveBtnClasses} onClick={handlerToFilterCreator('active')}>Active</button>\r\n                <button className={setFilterComplitedBtnClasses} onClick={handlerToFilterCreator('completed')}>Complited</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todolist;\r\n","import React, { useState } from 'react';\r\nimport { FilterType, TasksStateType, TasksType, TodoListType, TodoListsStateType } from '../types';\r\nimport './App.css';\r\nimport Todolist from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\nconst App = () => {\r\n\r\n    //BLL:\r\n    const todoListId_1 = v1();\r\n    const todoListId_2 = v1();\r\n\r\n        //localState\r\n    const [todoLists, setTodoLists] = useState<TodoListsStateType>([\r\n        {id: todoListId_1, title: 'What to lern', filter: 'all'},\r\n        {id: todoListId_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            { id: v1(), title: 'HTML', isDone: true, },\r\n            { id: v1(), title: 'CSS', isDone: true, },\r\n            { id: v1(), title: 'JS', isDone: true, },\r\n            { id: v1(), title: 'React', isDone: false, },\r\n            { id: v1(), title: 'Rest API', isDone: false, },\r\n            { id: v1(), title: 'GraphQL', isDone: false, },\r\n        ],\r\n        [todoListId_2]: [\r\n            { id: v1(), title: 'Milk', isDone: false, },\r\n            { id: v1(), title: 'Meat', isDone: false, },\r\n            { id: v1(), title: 'Pepsi', isDone: false, },\r\n            { id: v1(), title: 'Cheese', isDone: false, },\r\n        ],\r\n    })\r\n\r\n\r\n    //methods for filter\r\n    const getFiltredTasks = (tasks: TasksType[], filter: FilterType): TasksType[] => {\r\n        if (filter === 'active') return tasks.filter(t => t.isDone === false);\r\n        if (filter === 'completed') return tasks.filter(t => t.isDone === true);\r\n        return tasks;\r\n    }\r\n    const changeFilter = (todoListId: string, filter: FilterType) => {\r\n        const updatedTodoList = todoLists.map(todo => todo.id === todoListId ? {...todo, filter: filter} : todo);\r\n        setTodoLists(updatedTodoList);\r\n    };\r\n\r\n    //methods for tasks\r\n    const removeTask = (todoListId: string, id: string) => {\r\n        const updatedTasks = tasks[todoListId].filter(t => t.id !== id);\r\n        setTasks({...tasks, [todoListId]: updatedTasks});\r\n    };\r\n    const changeTaskStatus = (todoListId: string, id: string, status: boolean) => {\r\n        const updatedTasks = tasks[todoListId].map(t => t.id === id ? {...t, isDone: status} : t);\r\n        setTasks({...tasks, [todoListId]: updatedTasks});\r\n    }\r\n    const addTask = (todoListId: string, title: string) => {\r\n        const newTask = {id: v1(), title: title, isDone: false};\r\n        const updatedTasks = [newTask, ...tasks[todoListId],];\r\n        setTasks({...tasks, [todoListId]: updatedTasks});\r\n    }\r\n\r\n    //methods for todolists\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(todo => todo.id !== todoListId));\r\n        delete tasks[todoListId];\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodo: TodoListType = {id: v1(), title, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodo]);\r\n    }\r\n\r\n\r\n    //UI:\r\n    const todoListComponents: JSX.Element[] | JSX.Element = todoLists.map(todo => {\r\n        const filtredTasks = getFiltredTasks(tasks[todo.id], todo.filter);\r\n        return <Todolist\r\n            todoId={todo.id}\r\n            key={todo.id}\r\n            title={todo.title}\r\n            tasks={filtredTasks}\r\n            filter={todo.filter}\r\n\r\n            addTask={addTask}\r\n            removeTask={removeTask}\r\n            changeTaskStatus={changeTaskStatus}\r\n\r\n            changeFilter={changeFilter}\r\n            addTodoList={addTodoList}\r\n            removeTodoList={removeTodoList}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}